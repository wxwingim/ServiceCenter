// <auto-generated />
using System;
using DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBase.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220103201133_Init2")]
    partial class Init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataBase.Admission_for_repair", b =>
                {
                    b.Property<int>("num_admission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date_admission")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("date_limit")
                        .HasColumnType("datetime2");

                    b.Property<int>("idCustDev")
                        .HasColumnType("int");

                    b.Property<bool>("quarantee")
                        .HasColumnType("bit");

                    b.HasKey("num_admission");

                    b.HasIndex("idCustDev");

                    b.ToTable("Admission_For_Repairs");
                });

            modelBuilder.Entity("DataBase.Akt_delivery", b =>
                {
                    b.Property<int>("numDeliveri")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateDelivery")
                        .HasColumnType("datetime2");

                    b.HasKey("numDeliveri");

                    b.ToTable("Akt_Deliveries");
                });

            modelBuilder.Entity("DataBase.Customer", b =>
                {
                    b.Property<int>("idCustom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("firstCustom")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("lastCustom")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("mailCustom")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("middleCustom")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("telCustom")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("idCustom");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DataBase.Customer_device", b =>
                {
                    b.Property<int>("idCustDev")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("defect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("equipment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCustom")
                        .HasColumnType("int");

                    b.Property<string>("mechanicalDamage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("typeId")
                        .HasColumnType("int");

                    b.HasKey("idCustDev");

                    b.HasIndex("idCustom");

                    b.HasIndex("typeId");

                    b.ToTable("Customer_Devices");
                });

            modelBuilder.Entity("DataBase.Device_type", b =>
                {
                    b.Property<int>("typeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nameType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("typeId");

                    b.ToTable("Device_types");
                });

            modelBuilder.Entity("DataBase.Employee", b =>
                {
                    b.Property<int>("idWork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("firstWork")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("lastWork")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("mailWork")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("middleWork")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("phoneWork")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("idWork");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DataBase.ListEntry", b =>
                {
                    b.Property<int>("numRow")
                        .HasColumnType("int");

                    b.Property<int>("numPurchase")
                        .HasColumnType("int");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<int>("idSpare")
                        .HasColumnType("int");

                    b.HasKey("numRow", "numPurchase");

                    b.HasIndex("idSpare");

                    b.HasIndex("numPurchase");

                    b.ToTable("ListEntries");
                });

            modelBuilder.Entity("DataBase.Provider", b =>
                {
                    b.Property<int>("idProv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("addresProv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailProv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("innProv")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("phoneProv")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("idProv");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("DataBase.PurchaseInvoice", b =>
                {
                    b.Property<int>("numPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("datePurchase")
                        .HasColumnType("datetime2");

                    b.Property<int>("idProvider")
                        .HasColumnType("int");

                    b.HasKey("numPurchase");

                    b.HasIndex("idProvider");

                    b.ToTable("PurchaseInvoices");
                });

            modelBuilder.Entity("DataBase.SalesInvoice", b =>
                {
                    b.Property<int>("numSales")
                        .HasColumnType("int");

                    b.Property<int>("numWork")
                        .HasColumnType("int");

                    b.Property<int>("amountSales")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateSales")
                        .HasColumnType("datetime2");

                    b.Property<int>("idSpare")
                        .HasColumnType("int");

                    b.HasKey("numSales", "numWork");

                    b.HasIndex("idSpare");

                    b.HasIndex("numWork");

                    b.ToTable("SalesInvoices");
                });

            modelBuilder.Entity("DataBase.Service", b =>
                {
                    b.Property<int>("keyService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nameService")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("priceService")
                        .HasColumnType("int");

                    b.HasKey("keyService");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DataBase.SparePart", b =>
                {
                    b.Property<int>("idSpare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PurchaseInvoicenumPurchase")
                        .HasColumnType("int");

                    b.Property<string>("nameSpare")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("priceSpare")
                        .HasColumnType("int");

                    b.Property<string>("unitSpare")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("idSpare");

                    b.HasIndex("PurchaseInvoicenumPurchase");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("DataBase.Work_order", b =>
                {
                    b.Property<int>("numOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("durationQuarantee")
                        .HasColumnType("int");

                    b.Property<int>("numDeliveri")
                        .HasColumnType("int");

                    b.Property<int>("num_admission")
                        .HasColumnType("int");

                    b.Property<bool>("statusDelivery")
                        .HasColumnType("bit");

                    b.Property<bool>("statusPaymnt")
                        .HasColumnType("bit");

                    b.Property<string>("statusRepair")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("numOrder");

                    b.HasIndex("numDeliveri");

                    b.HasIndex("num_admission");

                    b.ToTable("Work_Orders");
                });

            modelBuilder.Entity("DataBase.Work_repair", b =>
                {
                    b.Property<int>("numWork")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dateReady")
                        .HasColumnType("datetime2");

                    b.Property<int>("idWork")
                        .HasColumnType("int");

                    b.Property<int>("keyService")
                        .HasColumnType("int");

                    b.Property<int>("numOrder")
                        .HasColumnType("int");

                    b.HasKey("numWork");

                    b.HasIndex("idWork");

                    b.HasIndex("keyService");

                    b.HasIndex("numOrder");

                    b.ToTable("Work_Repairs");
                });

            modelBuilder.Entity("DataBase.Admission_for_repair", b =>
                {
                    b.HasOne("DataBase.Customer_device", "customerDevice")
                        .WithMany("admissionForRepairs")
                        .HasForeignKey("idCustDev")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customerDevice");
                });

            modelBuilder.Entity("DataBase.Customer_device", b =>
                {
                    b.HasOne("DataBase.Customer", "customer")
                        .WithMany("devices")
                        .HasForeignKey("idCustom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Device_type", "type")
                        .WithMany("customer_Devices")
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("type");
                });

            modelBuilder.Entity("DataBase.ListEntry", b =>
                {
                    b.HasOne("DataBase.SparePart", "sparePart")
                        .WithMany("ListEntries")
                        .HasForeignKey("idSpare")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.PurchaseInvoice", "purchaseInvoice")
                        .WithMany()
                        .HasForeignKey("numPurchase")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("purchaseInvoice");

                    b.Navigation("sparePart");
                });

            modelBuilder.Entity("DataBase.PurchaseInvoice", b =>
                {
                    b.HasOne("DataBase.Provider", "provider")
                        .WithMany("purchaseIns")
                        .HasForeignKey("idProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("provider");
                });

            modelBuilder.Entity("DataBase.SalesInvoice", b =>
                {
                    b.HasOne("DataBase.SparePart", "part")
                        .WithMany("Invoices")
                        .HasForeignKey("idSpare")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Work_repair", "workRepair")
                        .WithMany("invoices")
                        .HasForeignKey("numWork")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("part");

                    b.Navigation("workRepair");
                });

            modelBuilder.Entity("DataBase.SparePart", b =>
                {
                    b.HasOne("DataBase.PurchaseInvoice", null)
                        .WithMany("spareParts")
                        .HasForeignKey("PurchaseInvoicenumPurchase");
                });

            modelBuilder.Entity("DataBase.Work_order", b =>
                {
                    b.HasOne("DataBase.Akt_delivery", "aktDelivery")
                        .WithMany()
                        .HasForeignKey("numDeliveri")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Admission_for_repair", "AdmissionForRepair")
                        .WithMany("work_Order")
                        .HasForeignKey("num_admission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmissionForRepair");

                    b.Navigation("aktDelivery");
                });

            modelBuilder.Entity("DataBase.Work_repair", b =>
                {
                    b.HasOne("DataBase.Employee", "employee")
                        .WithMany("workRepairs")
                        .HasForeignKey("idWork")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Service", "service")
                        .WithMany("workRepairs")
                        .HasForeignKey("keyService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Work_order", "workOrder")
                        .WithMany("workRepairs")
                        .HasForeignKey("numOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("service");

                    b.Navigation("workOrder");
                });

            modelBuilder.Entity("DataBase.Admission_for_repair", b =>
                {
                    b.Navigation("work_Order");
                });

            modelBuilder.Entity("DataBase.Customer", b =>
                {
                    b.Navigation("devices");
                });

            modelBuilder.Entity("DataBase.Customer_device", b =>
                {
                    b.Navigation("admissionForRepairs");
                });

            modelBuilder.Entity("DataBase.Device_type", b =>
                {
                    b.Navigation("customer_Devices");
                });

            modelBuilder.Entity("DataBase.Employee", b =>
                {
                    b.Navigation("workRepairs");
                });

            modelBuilder.Entity("DataBase.Provider", b =>
                {
                    b.Navigation("purchaseIns");
                });

            modelBuilder.Entity("DataBase.PurchaseInvoice", b =>
                {
                    b.Navigation("spareParts");
                });

            modelBuilder.Entity("DataBase.Service", b =>
                {
                    b.Navigation("workRepairs");
                });

            modelBuilder.Entity("DataBase.SparePart", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("ListEntries");
                });

            modelBuilder.Entity("DataBase.Work_order", b =>
                {
                    b.Navigation("workRepairs");
                });

            modelBuilder.Entity("DataBase.Work_repair", b =>
                {
                    b.Navigation("invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
